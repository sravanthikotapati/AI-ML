import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class TSPNearestNeighbor {

    public static int tsp(int[][] graph, int start) {
        int numNodes = graph.length;
        boolean[] visited = new boolean[numNodes];
        visited[start] = true;
        int current = start;
        int cost = 0;
        List<Integer> path = new ArrayList<>();
        path.add(start);

        for (int i = 0; i < numNodes - 1; i++) {
            int next = -1;
            int minDist = Integer.MAX_VALUE;

            for (int j = 0; j < numNodes; j++) {
                if (!visited[j] && graph[current][j] < minDist) {
                    next = j;
                    minDist = graph[current][j];
                }
            }
            visited[next] = true;
            path.add(next);
            cost += minDist;
            current = next;
        }
        cost += graph[current][start];
        path.add(start);

        System.out.println("Path: " + path);
        return cost;
    }
    public static void main(String[] args) {
        int[][] graph = {
            {0, 2, 9, 10},
            {1, 0, 6, 4},
            {15, 7, 0, 8},
            {6, 3, 12, 0}
        };

        int startNode = 0;
        int minCost = tsp(graph, startNode);

        System.out.println("Minimum cost: " + minCost);
    }
}
